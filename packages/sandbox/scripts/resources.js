const fs = require('fs');
const path = require('path');

// Paths to source files
const umdFilePath = path.resolve(__dirname, '../../markdown/dist/umd/idocs.markdown.umd.js');
const htmlFilePath = path.resolve(__dirname, '../templates/markdown.html');

const resourcesDir = path.resolve(__dirname, '../src/resources');
if (!fs.existsSync(resourcesDir)) {
  fs.mkdirSync(resourcesDir, { recursive: true });
}
// Paths to target TypeScript files
const rendererTsPath = path.resolve(__dirname, '../src/resources/rendererUmdJs.ts');
const templateTsPath = path.resolve(__dirname, '../src/resources/rendererHtml.ts');

function escapeForTemplate(content) {
  return content
    .replace(/\\/g, '\\\\')  // Escape backslashes
    .replace(/"/g, '\\"')    // Escape double quotes
    .replace(/`/g, '\\`')    // Escape template literals
    .replace(/\$\{/g, '\\${'); // Escape template literal expressions
}

try {
  // Read and process UMD file
  const umdContent = fs.readFileSync(umdFilePath, 'utf8');
  const escapedUmdContent = escapeForTemplate(umdContent);
  
  const rendererTsContent = `//this file is automatically generated

export const rendererUmdJs = \`${escapedUmdContent}\`;
`;

  // Read and process HTML file
  const htmlContent = fs.readFileSync(htmlFilePath, 'utf8');
  const escapedHtmlContent = escapeForTemplate(htmlContent);
  
  const templateTsContent = `//this file is automatically generated

export const rendererHtml = \`${escapedHtmlContent}\`;
`;

  // Write both files
  fs.writeFileSync(rendererTsPath, rendererTsContent, 'utf8');
  fs.writeFileSync(templateTsPath, templateTsContent, 'utf8');
  
  console.log('Successfully updated renderer.ts and template.ts with content');
} catch (error) {
  console.error('Error updating TypeScript files:', error.message);
  process.exit(1);
}